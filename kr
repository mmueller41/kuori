from picle import App
from typing import Any, List, Union, Optional
from pydantic import BaseModel, Field, StrictStr
from kuori.kuori import Kuori
import typer

hostname = ""
port = 0

class model_show(BaseModel):
    version: Any = Field(
        None,
        description="Show software version",
        json_schema_extra={"function": "show_version"},
    )
    cells: Any = Field(
        None,
        description="Show status of all cells in the habitat",
        json_schema_extra={"function": "show_cells"},
    )
    config: Any = Field(
        None,
        description="Show habitat configuration as XML",
        json_schema_extra={"function": "show_config"},
    )
    

    @staticmethod
    def show_version():
        return "0.1.0"

    @staticmethod
    def show_cells():
        print("Connecting to %s:%d"%(hostname, port))
        shell = Kuori(hostname, port)
        shell.list()
        return ""
    
    @staticmethod
    def show_config():
        shell = Kuori(hostname, port)
        shell.print_config()
        return ""

class model_launch(BaseModel):
    cells: Union[StrictStr, List[StrictStr]] = Field(..., description="Config file(s) for cell(s)", required=True)

    @staticmethod
    def run(**kwargs):
        if type(kwargs['cells']) is list:
            for xml in kwargs['cells']:
                shell = Kuori(hostname, port)
                shell.launch(xml)
        else:
            shell = Kuori(hostname, port)
            shell.launch(kwargs["cells"])
        
class model_kill(BaseModel):
    cells: Union[StrictStr, List[StrictStr]] = Field(..., description="Cells to destroy", required=True)

    @staticmethod
    def run(**kwargs):
        cells = kwargs['cells']
        if (type(cells)) is list:
            for cell in cells:
                shell = Kuori(hostname, port)
                shell.kill(cell)
        else:
            print("Killing cell ", cells)
            shell = Kuori(hostname, port)
            shell.kill(cells)

class Root(BaseModel):
    show: model_show = Field(None, description="Show commands")
    launch: model_launch = Field(None, description="Launch new cells")
    kill: model_kill = Field(None, description="Destroy cells")

    class PicleConfig:
        prompt = "kuori@%s:%d> "%(hostname, port)
        intro = "Kuori Remote Command Shell"

def main(host:str, portnum:int):
    global hostname
    hostname = host
    global port
    port = portnum

    shell = App(Root)
    shell.start()

if __name__ == "__main__":
    typer.run(main)